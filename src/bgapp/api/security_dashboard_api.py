"""
API Endpoints para Dashboard de Seguran√ßa
Fornece dados em tempo real para interface de monitoriza√ß√£o
"""

from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from fastapi import APIRouter, HTTPException, Depends, Query
from fastapi.responses import HTMLResponse
from pydantic import BaseModel

try:
    from ..monitoring.security_dashboard import get_security_dashboard, SecurityStatus, AlertLevel
    from ..auth.security import require_admin, User
from bgapp.core.logger import logger
    DASHBOARD_AVAILABLE = True
except ImportError:
    DASHBOARD_AVAILABLE = False

router = APIRouter(prefix="/security", tags=["security-monitoring"])

class SecurityMetricResponse(BaseModel):
    """Resposta de m√©trica de seguran√ßa"""
    name: str
    value: Any
    status: str
    timestamp: str
    description: str
    threshold: Optional[float] = None
    unit: Optional[str] = None

class SecuritySummaryResponse(BaseModel):
    """Resumo de seguran√ßa"""
    overall_score: float
    status: str
    metrics_summary: Dict[str, int]
    active_alerts: int
    critical_alerts: int
    recent_violations: int
    uptime_hours: float
    last_updated: str

class SecurityHealthResponse(BaseModel):
    """Status de sa√∫de da seguran√ßa"""
    overall_health: float
    security_score: float
    status: str
    components: Dict[str, bool]
    active_alerts: int
    uptime_hours: float
    last_check: str

class AlertResponse(BaseModel):
    """Resposta de alerta"""
    alert_id: str
    level: str
    title: str
    description: str
    timestamp: str
    source: str
    resolved: bool
    details: Dict[str, Any]

if DASHBOARD_AVAILABLE:
    
    @router.get("/", response_class=HTMLResponse)
    async def security_dashboard_page(current_user: User = Depends(require_admin)):
        """P√°gina do dashboard de seguran√ßa"""
        try:
            dashboard_html_path = Path(__file__).parent.parent.parent.parent / "templates" / "security_dashboard.html"
            
            if dashboard_html_path.exists():
                with open(dashboard_html_path, 'r', encoding='utf-8') as f:
                    html_content = f.read()
                return HTMLResponse(content=html_content)
            else:
                return HTMLResponse(content="""
                    <html><body>
                        <h1>üö® Dashboard de Seguran√ßa</h1>
                        <p>Template n√£o encontrado. Usando vers√£o b√°sica.</p>
                        <script>
                            window.location.href = '/admin-api/security/health';
                        </script>
                    </body></html>
                """)
                
        except Exception as e:
            raise HTTPException(
                status_code=500,
                detail=f"Erro ao carregar dashboard: {str(e)}"
            )
    
    @router.get("/health", response_model=SecurityHealthResponse)
    async def get_security_health(current_user: User = Depends(require_admin)):
        """Obter status de sa√∫de da seguran√ßa"""
        try:
            dashboard = get_security_dashboard()
            health_data = dashboard.get_health_status()
            
            return SecurityHealthResponse(**health_data)
            
        except Exception as e:
            raise HTTPException(
                status_code=500,
                detail=f"Erro ao obter status de sa√∫de: {str(e)}"
            )
    
    @router.get("/summary", response_model=SecuritySummaryResponse)
    async def get_security_summary(current_user: User = Depends(require_admin)):
        """Obter resumo de seguran√ßa"""
        try:
            dashboard = get_security_dashboard()
            summary_data = dashboard.get_security_summary()
            
            return SecuritySummaryResponse(**summary_data)
            
        except Exception as e:
            raise HTTPException(
                status_code=500,
                detail=f"Erro ao obter resumo: {str(e)}"
            )
    
    @router.get("/metrics", response_model=List[SecurityMetricResponse])
    async def get_security_metrics(
        current_user: User = Depends(require_admin),
        category: Optional[str] = Query(None, description="Filtrar por categoria"),
        status: Optional[str] = Query(None, description="Filtrar por status")
    ):
        """Obter m√©tricas de seguran√ßa"""
        try:
            dashboard = get_security_dashboard()
            dashboard_data = dashboard.get_dashboard_data()
            
            metrics = dashboard_data['metrics']
            
            # Aplicar filtros
            if category:
                metrics = [m for m in metrics if category.lower() in m['name'].lower()]
            
            if status:
                metrics = [m for m in metrics if m['status'] == status]
            
            return [SecurityMetricResponse(**metric) for metric in metrics]
            
        except Exception as e:
            raise HTTPException(
                status_code=500,
                detail=f"Erro ao obter m√©tricas: {str(e)}"
            )
    
    @router.get("/alerts", response_model=List[AlertResponse])
    async def get_security_alerts(
        current_user: User = Depends(require_admin),
        level: Optional[str] = Query(None, description="Filtrar por n√≠vel"),
        active_only: bool = Query(True, description="Apenas alertas ativos"),
        limit: int = Query(50, description="Limite de alertas", ge=1, le=500)
    ):
        """Obter alertas de seguran√ßa"""
        try:
            dashboard = get_security_dashboard()
            
            alerts = dashboard.active_alerts if active_only else \
                    dashboard.active_alerts + list(dashboard.resolved_alerts)
            
            # Aplicar filtros
            if level:
                alerts = [a for a in alerts if a.level.value == level]
            
            # Limitar resultados
            alerts = alerts[-limit:]
            
            return [AlertResponse(**asdict(alert)) for alert in alerts]
            
        except Exception as e:
            raise HTTPException(
                status_code=500,
                detail=f"Erro ao obter alertas: {str(e)}"
            )
    
    @router.post("/alerts/{alert_id}/resolve")
    async def resolve_alert(
        alert_id: str,
        current_user: User = Depends(require_admin)
    ):
        """Resolver alerta"""
        try:
            dashboard = get_security_dashboard()
            success = dashboard.resolve_alert(alert_id)
            
            if success:
                return {"message": "Alerta resolvido com sucesso", "alert_id": alert_id}
            else:
                raise HTTPException(
                    status_code=404,
                    detail="Alerta n√£o encontrado"
                )
                
        except HTTPException:
            raise
        except Exception as e:
            raise HTTPException(
                status_code=500,
                detail=f"Erro ao resolver alerta: {str(e)}"
            )
    
    @router.get("/dashboard")
    async def get_dashboard_data(current_user: User = Depends(require_admin)):
        """Obter dados completos do dashboard"""
        try:
            dashboard = get_security_dashboard()
            return dashboard.get_dashboard_data()
            
        except Exception as e:
            raise HTTPException(
                status_code=500,
                detail=f"Erro ao obter dados do dashboard: {str(e)}"
            )
    
    @router.get("/export")
    async def export_security_data(
        current_user: User = Depends(require_admin),
        hours: int = Query(24, description="Horas de hist√≥rico", ge=1, le=168)
    ):
        """Exportar dados de seguran√ßa"""
        try:
            dashboard = get_security_dashboard()
            export_data = dashboard.export_metrics(hours=hours)
            
            return {
                "export_data": export_data,
                "format": "json",
                "generated_at": datetime.now().isoformat()
            }
            
        except Exception as e:
            raise HTTPException(
                status_code=500,
                detail=f"Erro ao exportar dados: {str(e)}"
            )
    
    @router.post("/events")
    async def record_security_event(
        event_type: str,
        severity: str = "info",
        details: Optional[Dict[str, Any]] = None,
        current_user: User = Depends(require_admin)
    ):
        """Registrar evento de seguran√ßa manualmente"""
        try:
            dashboard = get_security_dashboard()
            dashboard.record_security_event(event_type, severity, details)
            
            return {
                "message": "Evento registrado com sucesso",
                "event_type": event_type,
                "severity": severity,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            raise HTTPException(
                status_code=500,
                detail=f"Erro ao registrar evento: {str(e)}"
            )

else:
    # Endpoints desabilitados se dashboard n√£o dispon√≠vel
    
    @router.get("/health")
    async def dashboard_not_available():
        raise HTTPException(
            status_code=503,
            detail="Dashboard de seguran√ßa n√£o dispon√≠vel"
        )
    
    @router.get("/summary")
    async def summary_not_available():
        raise HTTPException(
            status_code=503,
            detail="Dashboard de seguran√ßa n√£o dispon√≠vel"
        )

# Fun√ß√£o para incluir router na aplica√ß√£o
def include_security_dashboard_router(app):
    """Incluir router do dashboard na aplica√ß√£o"""
    app.include_router(router)
    
    if DASHBOARD_AVAILABLE:
        logger.info("‚úÖ Endpoints do dashboard de seguran√ßa adicionados")
    else:
        logger.info("‚ö†Ô∏è Endpoints do dashboard desabilitados (sistema n√£o dispon√≠vel)")

if __name__ == "__main__":
    logger.info("üìä API do Dashboard de Seguran√ßa - BGAPP")
    logger.info("Endpoints para monitoriza√ß√£o de seguran√ßa em tempo real")
    
    if DASHBOARD_AVAILABLE:
        logger.info("‚úÖ Dashboard dispon√≠vel")
        logger.info("\nEndpoints dispon√≠veis:")
        logger.info("  GET /security/health - Status de sa√∫de")
        logger.info("  GET /security/summary - Resumo de seguran√ßa")  
        logger.info("  GET /security/metrics - M√©tricas detalhadas")
        logger.info("  GET /security/alerts - Alertas de seguran√ßa")
        logger.info("  GET /security/dashboard - Dados completos")
        logger.info("  GET /security/export - Exportar hist√≥rico")
        logger.info("  POST /security/events - Registrar evento")
    else:
        logger.info("‚ùå Dashboard n√£o dispon√≠vel")
