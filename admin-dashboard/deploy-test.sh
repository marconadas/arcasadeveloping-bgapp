#!/bin/bash

# üöÄ BGAPP - Deploy de Teste com Memory Leak Fixes
# Deploy r√°pido para verificar as corre√ß√µes

echo "=================================================="
echo "üöÄ BGAPP Deploy de Teste - Memory Leak Fixes"
echo "=================================================="
echo ""

# Cores
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Fun√ß√µes de log
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

# 1. Verificar altera√ß√µes
log_info "Verificando altera√ß√µes implementadas..."
echo ""
echo "üìã Corre√ß√µes de Memory Leaks Implementadas:"
echo "  ‚úÖ Dashboard Components - Cleanup functions adicionadas"
echo "  ‚úÖ Integration Components - AbortController implementado"  
echo "  ‚úÖ API Functions - Suporte para cancelamento de requisi√ß√µes"
echo "  ‚úÖ Timers e Intervals - Limpeza adequada implementada"
echo "  ‚úÖ Event Listeners - Remo√ß√£o correta garantida"
echo ""

# 2. Build da aplica√ß√£o
log_info "Fazendo build da aplica√ß√£o..."
npm run build

if [ $? -ne 0 ]; then
    log_error "Build falhou! Verifique os erros."
    exit 1
fi

log_success "Build conclu√≠do com sucesso!"

# 3. Criar servidor de teste local
log_info "Iniciando servidor de teste local..."
echo ""

# Matar processos anteriores na porta 8080
lsof -ti:8080 | xargs kill -9 2>/dev/null

# Iniciar servidor Python simples
cd out
python3 -m http.server 8080 &
SERVER_PID=$!
cd ..

sleep 2

# 4. Mostrar informa√ß√µes de acesso
echo ""
log_success "üéâ Deploy de teste conclu√≠do!"
echo ""
echo "=================================================="
echo "üì± ACESSO LOCAL:"
echo "   URL: http://localhost:8080"
echo "   PID do servidor: $SERVER_PID"
echo ""
echo "üîç TESTES RECOMENDADOS:"
echo "   1. Verificar console do browser para memory leaks"
echo "   2. Navegar entre p√°ginas m√∫ltiplas vezes"
echo "   3. Monitorar uso de mem√≥ria no DevTools"
echo "   4. Verificar cancelamento de requisi√ß√µes pendentes"
echo ""
echo "‚èπÔ∏è  Para parar o servidor: kill $SERVER_PID"
echo "=================================================="
echo ""

# 5. Op√ß√£o de abrir no browser
read -p "Deseja abrir no browser agora? (s/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Ss]$ ]]; then
    if command -v xdg-open > /dev/null; then
        xdg-open "http://localhost:8080"
    elif command -v open > /dev/null; then
        open "http://localhost:8080"
    else
        log_warning "N√£o foi poss√≠vel abrir automaticamente. Acesse: http://localhost:8080"
    fi
fi

# Manter servidor rodando
log_info "Servidor rodando. Pressione Ctrl+C para parar..."
wait $SERVER_PID