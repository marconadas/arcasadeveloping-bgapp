#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ Servi√ßo MCDA (Multi-Criteria Decision Analysis) - BGAPP
=========================================================

Este m√≥dulo implementa an√°lises multi-crit√©rio avan√ßadas para planeamento
espacial marinho, incluindo AHP (Analytic Hierarchy Process), TOPSIS,
e an√°lises de adequa√ß√£o para diferentes usos do espa√ßo marinho.

Funcionalidades:
- An√°lise Hier√°rquica de Processos (AHP)
- TOPSIS para ranking de alternativas
- An√°lise de adequa√ß√£o de habitat
- Planeamento de aquacultura
- Zoneamento de √°reas de pesca
- Identifica√ß√£o de √°reas marinhas protegidas
- An√°lise de sensibilidade

Autor: Sistema BGAPP
Data: Janeiro 2025
"""

import logging
import numpy as np
import pandas as pd
import geopandas as gpd
from typing import Dict, List, Optional, Tuple, Union, Any
from pathlib import Path
import json
from datetime import datetime
import asyncio
from dataclasses import dataclass, field
from enum import Enum
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from sklearn.preprocessing import MinMaxScaler, StandardScaler
from sklearn.cluster import KMeans
import warnings
from bgapp.core.logger import logger
warnings.filterwarnings('ignore')

# Configura√ß√£o do logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class CriterionType(Enum):
    """Tipos de crit√©rios"""
    BENEFIT = "benefit"      # Quanto maior, melhor
    COST = "cost"           # Quanto menor, melhor
    TARGET = "target"       # Valor alvo espec√≠fico

class PlanningObjective(Enum):
    """Objetivos de planeamento"""
    AQUACULTURE = "aquaculture"
    FISHING = "fishing"
    CONSERVATION = "conservation"
    TOURISM = "tourism"
    RENEWABLE_ENERGY = "renewable_energy"
    SHIPPING = "shipping"

@dataclass
class Criterion:
    """Crit√©rio de decis√£o"""
    name: str
    description: str
    criterion_type: CriterionType
    weight: float = 0.0
    target_value: Optional[float] = None
    min_threshold: Optional[float] = None
    max_threshold: Optional[float] = None
    unit: str = ""
    
@dataclass
class Alternative:
    """Alternativa de decis√£o (localiza√ß√£o espacial)"""
    id: str
    name: str
    latitude: float
    longitude: float
    criteria_values: Dict[str, float] = field(default_factory=dict)
    scores: Dict[str, float] = field(default_factory=dict)
    final_score: float = 0.0
    rank: int = 0
    
@dataclass
class MCDAResult:
    """Resultado da an√°lise MCDA"""
    objective: PlanningObjective
    method: str
    alternatives: List[Alternative]
    criteria: List[Criterion]
    weights: Dict[str, float]
    consistency_ratio: Optional[float] = None
    sensitivity_analysis: Optional[Dict] = None
    created_at: datetime = field(default_factory=datetime.now)

class MCDAService:
    """
    üéØ Servi√ßo de An√°lise Multi-Crit√©rio
    
    Este servi√ßo implementa m√©todos avan√ßados de tomada de decis√£o
    multi-crit√©rio para planeamento espacial marinho.
    """
    
    def __init__(self, config_path: Optional[str] = None):
        """
        Inicializar o servi√ßo MCDA
        
        Args:
            config_path: Caminho para ficheiro de configura√ß√£o
        """
        self.config = self._load_config(config_path)
        self.criteria_library: Dict[str, Dict] = {}
        self.results_history: List[MCDAResult] = []
        
        # Diret√≥rios
        self.data_dir = Path(self.config.get('data_dir', 'data/mcda'))
        self.output_dir = Path(self.config.get('output_dir', 'outputs/mcda'))
        
        # Criar diret√≥rios
        for dir_path in [self.data_dir, self.output_dir]:
            dir_path.mkdir(parents=True, exist_ok=True)
        
        # Carregar biblioteca de crit√©rios pr√©-definidos
        self._load_criteria_library()
        
        logger.info("üöÄ Servi√ßo MCDA inicializado com sucesso")
    
    def _load_config(self, config_path: Optional[str]) -> Dict:
        """Carregar configura√ß√£o"""
        default_config = {
            'data_dir': 'data/mcda',
            'output_dir': 'outputs/mcda',
            'angola_marine_area': {
                'min_lat': -18.0,
                'max_lat': -4.0,
                'min_lon': 8.0,
                'max_lon': 16.0  # Incluir √°rea oce√¢nica
            },
            'grid_resolution_km': 10,  # Resolu√ß√£o da grelha de an√°lise
            'consistency_threshold': 0.1,  # Threshold para AHP
            'sensitivity_steps': 20  # Passos para an√°lise de sensibilidade
        }
        
        if config_path and Path(config_path).exists():
            with open(config_path, 'r', encoding='utf-8') as f:
                user_config = json.load(f)
                default_config.update(user_config)
        
        return default_config
    
    def _load_criteria_library(self) -> None:
        """Carregar biblioteca de crit√©rios pr√©-definidos"""
        self.criteria_library = {
            'aquaculture': {
                'depth': {
                    'name': 'Profundidade',
                    'description': 'Profundidade adequada para aquacultura',
                    'type': 'target',
                    'target_value': -30,  # 30m de profundidade
                    'unit': 'm'
                },
                'temperature': {
                    'name': 'Temperatura da √Ågua',
                    'description': 'Temperatura √≥tima para esp√©cies cultivadas',
                    'type': 'target',
                    'target_value': 24,  # 24¬∞C
                    'unit': '¬∞C'
                },
                'current_speed': {
                    'name': 'Velocidade da Corrente',
                    'description': 'Corrente adequada para renova√ß√£o da √°gua',
                    'type': 'target',
                    'target_value': 0.3,  # 0.3 m/s
                    'unit': 'm/s'
                },
                'distance_to_coast': {
                    'name': 'Dist√¢ncia √† Costa',
                    'description': 'Proximidade para log√≠stica',
                    'type': 'cost',
                    'unit': 'km'
                },
                'wave_height': {
                    'name': 'Altura das Ondas',
                    'description': 'Condi√ß√µes calmas para estruturas',
                    'type': 'cost',
                    'unit': 'm'
                }
            },
            'fishing': {
                'chlorophyll': {
                    'name': 'Clorofila-a',
                    'description': 'Produtividade prim√°ria',
                    'type': 'benefit',
                    'unit': 'mg/m¬≥'
                },
                'depth': {
                    'name': 'Profundidade',
                    'description': 'Profundidade de pesca',
                    'type': 'target',
                    'target_value': -100,  # 100m
                    'unit': 'm'
                },
                'distance_to_port': {
                    'name': 'Dist√¢ncia ao Porto',
                    'description': 'Custo de desloca√ß√£o',
                    'type': 'cost',
                    'unit': 'km'
                },
                'fish_abundance': {
                    'name': 'Abund√¢ncia de Peixe',
                    'description': 'Densidade de esp√©cies comerciais',
                    'type': 'benefit',
                    'unit': 'kg/km¬≤'
                }
            },
            'conservation': {
                'biodiversity': {
                    'name': 'Biodiversidade',
                    'description': 'Riqueza de esp√©cies',
                    'type': 'benefit',
                    'unit': '√≠ndice'
                },
                'habitat_quality': {
                    'name': 'Qualidade do Habitat',
                    'description': 'Estado de conserva√ß√£o',
                    'type': 'benefit',
                    'unit': '√≠ndice'
                },
                'human_pressure': {
                    'name': 'Press√£o Humana',
                    'description': 'Impacto antropog√©nico',
                    'type': 'cost',
                    'unit': '√≠ndice'
                },
                'connectivity': {
                    'name': 'Conectividade',
                    'description': 'Conectividade ecol√≥gica',
                    'type': 'benefit',
                    'unit': '√≠ndice'
                }
            }
        }
        
        logger.info(f"‚úÖ Biblioteca de crit√©rios carregada: {len(self.criteria_library)} objetivos")
    
    def create_spatial_grid(
        self, 
        bounds: Optional[Dict] = None,
        resolution_km: Optional[float] = None
    ) -> List[Alternative]:
        """
        üó∫Ô∏è Criar grelha espacial para an√°lise
        
        Args:
            bounds: Limites da √°rea (opcional)
            resolution_km: Resolu√ß√£o em km (opcional)
            
        Returns:
            Lista de alternativas (pontos da grelha)
        """
        if bounds is None:
            bounds = self.config['angola_marine_area']
        
        if resolution_km is None:
            resolution_km = self.config['grid_resolution_km']
        
        logger.info(f"üó∫Ô∏è Criando grelha espacial (resolu√ß√£o: {resolution_km}km)")
        
        # Converter resolu√ß√£o para graus (aproxima√ß√£o)
        resolution_deg = resolution_km / 111.0  # ~111 km por grau
        
        # Criar grelha
        lats = np.arange(bounds['min_lat'], bounds['max_lat'], resolution_deg)
        lons = np.arange(bounds['min_lon'], bounds['max_lon'], resolution_deg)
        
        alternatives = []
        alt_id = 1
        
        for lat in lats:
            for lon in lons:
                alternative = Alternative(
                    id=f"GRID_{alt_id:04d}",
                    name=f"Ponto {alt_id}",
                    latitude=lat,
                    longitude=lon
                )
                alternatives.append(alternative)
                alt_id += 1
        
        logger.info(f"‚úÖ Grelha criada com {len(alternatives)} pontos")
        return alternatives
    
    def populate_criteria_values(
        self, 
        alternatives: List[Alternative],
        objective: PlanningObjective
    ) -> List[Alternative]:
        """
        üìä Preencher valores dos crit√©rios para as alternativas
        
        Args:
            alternatives: Lista de alternativas
            objective: Objetivo de planeamento
            
        Returns:
            Alternativas com valores preenchidos
        """
        logger.info(f"üìä Preenchendo valores dos crit√©rios para {objective.value}")
        
        objective_criteria = self.criteria_library.get(objective.value, {})
        
        for alternative in alternatives:
            # Simular valores baseados na localiza√ß√£o
            values = self._simulate_environmental_data(
                alternative.latitude, 
                alternative.longitude, 
                objective
            )
            alternative.criteria_values = values
        
        logger.info(f"‚úÖ Valores preenchidos para {len(alternatives)} alternativas")
        return alternatives
    
    def _simulate_environmental_data(
        self, 
        lat: float, 
        lon: float, 
        objective: PlanningObjective
    ) -> Dict[str, float]:
        """Simular dados ambientais baseados na localiza√ß√£o"""
        
        # Dist√¢ncia √† costa (aproxima√ß√£o)
        coastal_distance = self._calculate_coastal_distance(lat, lon)
        
        # Profundidade (simulada baseada na dist√¢ncia √† costa)
        depth = -10 - (coastal_distance * 10) + np.random.normal(0, 20)
        depth = max(-2000, min(-5, depth))  # Limitar entre 5m e 2000m
        
        # Temperatura (baseada na latitude)
        temperature = 26 - (lat + 11) * 0.5 + np.random.normal(0, 1)
        temperature = max(18, min(30, temperature))
        
        # Clorofila-a (maior perto da costa devido ao upwelling)
        chlorophyll = max(0.1, 3.0 - coastal_distance * 0.1 + np.random.normal(0, 0.5))
        
        # Velocidade da corrente
        current_speed = 0.2 + np.random.normal(0, 0.1)
        current_speed = max(0, min(1.0, current_speed))
        
        # Altura das ondas (maior em √°guas abertas)
        wave_height = 1.0 + coastal_distance * 0.05 + np.random.normal(0, 0.3)
        wave_height = max(0.5, min(4.0, wave_height))
        
        # Dist√¢ncia ao porto (Luanda como refer√™ncia)
        port_distance = self._calculate_distance_to_luanda(lat, lon)
        
        # Biodiversidade (simulada)
        biodiversity = 0.7 + np.random.normal(0, 0.2)
        biodiversity = max(0, min(1, biodiversity))
        
        # Qualidade do habitat
        habitat_quality = 0.8 - (coastal_distance * 0.01) + np.random.normal(0, 0.1)
        habitat_quality = max(0, min(1, habitat_quality))
        
        # Press√£o humana (maior perto da costa)
        human_pressure = max(0, 0.8 - coastal_distance * 0.02 + np.random.normal(0, 0.1))
        human_pressure = max(0, min(1, human_pressure))
        
        # Abund√¢ncia de peixe (baseada na clorofila e profundidade)
        fish_abundance = chlorophyll * 100 * (1 + abs(depth) / 1000) + np.random.normal(0, 50)
        fish_abundance = max(0, fish_abundance)
        
        # Conectividade (simulada)
        connectivity = 0.6 + np.random.normal(0, 0.2)
        connectivity = max(0, min(1, connectivity))
        
        return {
            'depth': depth,
            'temperature': temperature,
            'current_speed': current_speed,
            'distance_to_coast': coastal_distance,
            'wave_height': wave_height,
            'chlorophyll': chlorophyll,
            'distance_to_port': port_distance,
            'fish_abundance': fish_abundance,
            'biodiversity': biodiversity,
            'habitat_quality': habitat_quality,
            'human_pressure': human_pressure,
            'connectivity': connectivity
        }
    
    def _calculate_coastal_distance(self, lat: float, lon: float) -> float:
        """Calcular dist√¢ncia aproximada √† costa"""
        # Coordenadas aproximadas da costa angolana
        coast_points = [
            (-5.55, 12.20),   # Cabinda
            (-8.84, 13.23),   # Luanda
            (-12.58, 13.41),  # Benguela
            (-15.20, 12.15),  # Namibe
        ]
        
        min_distance = float('inf')
        for coast_lat, coast_lon in coast_points:
            distance = ((lat - coast_lat)**2 + (lon - coast_lon)**2)**0.5 * 111  # Converter para km
            min_distance = min(min_distance, distance)
        
        return min_distance
    
    def _calculate_distance_to_luanda(self, lat: float, lon: float) -> float:
        """Calcular dist√¢ncia ao porto de Luanda"""
        luanda_lat, luanda_lon = -8.84, 13.23
        distance = ((lat - luanda_lat)**2 + (lon - luanda_lon)**2)**0.5 * 111
        return distance
    
    def setup_ahp_criteria(
        self, 
        objective: PlanningObjective,
        custom_weights: Optional[Dict[str, float]] = None
    ) -> List[Criterion]:
        """
        üéØ Configurar crit√©rios para AHP
        
        Args:
            objective: Objetivo de planeamento
            custom_weights: Pesos personalizados (opcional)
            
        Returns:
            Lista de crit√©rios configurados
        """
        logger.info(f"üéØ Configurando crit√©rios AHP para {objective.value}")
        
        criteria_config = self.criteria_library.get(objective.value, {})
        criteria = []
        
        # Pesos padr√£o por objetivo
        default_weights = {
            'aquaculture': {
                'depth': 0.3,
                'temperature': 0.25,
                'current_speed': 0.2,
                'distance_to_coast': 0.15,
                'wave_height': 0.1
            },
            'fishing': {
                'chlorophyll': 0.4,
                'depth': 0.25,
                'distance_to_port': 0.2,
                'fish_abundance': 0.15
            },
            'conservation': {
                'biodiversity': 0.35,
                'habitat_quality': 0.3,
                'human_pressure': 0.2,
                'connectivity': 0.15
            }
        }
        
        weights = custom_weights or default_weights.get(objective.value, {})
        
        for criterion_name, config in criteria_config.items():
            if criterion_name in weights:
                criterion_type = CriterionType(config['type'])
                
                criterion = Criterion(
                    name=config['name'],
                    description=config['description'],
                    criterion_type=criterion_type,
                    weight=weights[criterion_name],
                    target_value=config.get('target_value'),
                    unit=config['unit']
                )
                criteria.append(criterion)
        
        logger.info(f"‚úÖ Configurados {len(criteria)} crit√©rios")
        return criteria
    
    def calculate_ahp_scores(
        self,
        alternatives: List[Alternative],
        criteria: List[Criterion]
    ) -> List[Alternative]:
        """
        üßÆ Calcular scores usando AHP
        
        Args:
            alternatives: Lista de alternativas
            criteria: Lista de crit√©rios
            
        Returns:
            Alternativas com scores calculados
        """
        logger.info("üßÆ Calculando scores AHP")
        
        # Normalizar valores dos crit√©rios
        scaler = MinMaxScaler()
        
        for criterion in criteria:
            criterion_name = criterion.name.lower().replace(' ', '_')
            
            # Extrair valores para este crit√©rio
            values = []
            for alt in alternatives:
                # Mapear nomes dos crit√©rios
                mapped_name = self._map_criterion_name(criterion_name)
                if mapped_name in alt.criteria_values:
                    values.append(alt.criteria_values[mapped_name])
                else:
                    values.append(0)
            
            if not values:
                continue
                
            values = np.array(values).reshape(-1, 1)
            
            # Normalizar baseado no tipo de crit√©rio
            if criterion.criterion_type == CriterionType.BENEFIT:
                # Maior √© melhor
                normalized = scaler.fit_transform(values).flatten()
            elif criterion.criterion_type == CriterionType.COST:
                # Menor √© melhor (inverter)
                normalized = 1 - scaler.fit_transform(values).flatten()
            else:  # TARGET
                # Proximidade ao valor alvo
                if criterion.target_value is not None:
                    distances = np.abs(values.flatten() - criterion.target_value)
                    max_distance = np.max(distances)
                    if max_distance > 0:
                        normalized = 1 - (distances / max_distance)
                    else:
                        normalized = np.ones(len(values))
                else:
                    normalized = scaler.fit_transform(values).flatten()
            
            # Atribuir scores normalizados
            for i, alt in enumerate(alternatives):
                alt.scores[criterion_name] = normalized[i]
        
        # Calcular score final ponderado
        for alt in alternatives:
            final_score = 0
            total_weight = 0
            
            for criterion in criteria:
                criterion_name = criterion.name.lower().replace(' ', '_')
                if criterion_name in alt.scores:
                    final_score += alt.scores[criterion_name] * criterion.weight
                    total_weight += criterion.weight
            
            if total_weight > 0:
                alt.final_score = final_score / total_weight
            else:
                alt.final_score = 0
        
        # Ranking
        alternatives.sort(key=lambda x: x.final_score, reverse=True)
        for i, alt in enumerate(alternatives):
            alt.rank = i + 1
        
        logger.info("‚úÖ Scores AHP calculados")
        return alternatives
    
    def _map_criterion_name(self, criterion_name: str) -> str:
        """Mapear nomes de crit√©rios para nomes dos dados"""
        mapping = {
            'profundidade': 'depth',
            'temperatura_da_√°gua': 'temperature',
            'velocidade_da_corrente': 'current_speed',
            'dist√¢ncia_√†_costa': 'distance_to_coast',
            'altura_das_ondas': 'wave_height',
            'clorofila-a': 'chlorophyll',
            'dist√¢ncia_ao_porto': 'distance_to_port',
            'abund√¢ncia_de_peixe': 'fish_abundance',
            'biodiversidade': 'biodiversity',
            'qualidade_do_habitat': 'habitat_quality',
            'press√£o_humana': 'human_pressure',
            'conectividade': 'connectivity'
        }
        return mapping.get(criterion_name, criterion_name)
    
    def perform_topsis_analysis(
        self,
        alternatives: List[Alternative],
        criteria: List[Criterion]
    ) -> List[Alternative]:
        """
        üìä Realizar an√°lise TOPSIS
        
        Args:
            alternatives: Lista de alternativas
            criteria: Lista de crit√©rios
            
        Returns:
            Alternativas ranqueadas por TOPSIS
        """
        logger.info("üìä Realizando an√°lise TOPSIS")
        
        # Criar matriz de decis√£o
        criterion_names = [c.name.lower().replace(' ', '_') for c in criteria]
        decision_matrix = []
        
        for alt in alternatives:
            row = []
            for criterion in criteria:
                criterion_name = criterion.name.lower().replace(' ', '_')
                mapped_name = self._map_criterion_name(criterion_name)
                value = alt.criteria_values.get(mapped_name, 0)
                row.append(value)
            decision_matrix.append(row)
        
        decision_matrix = np.array(decision_matrix)
        
        # Normalizar matriz
        norm_matrix = decision_matrix / np.sqrt(np.sum(decision_matrix**2, axis=0))
        
        # Aplicar pesos
        weights = np.array([c.weight for c in criteria])
        weighted_matrix = norm_matrix * weights
        
        # Determinar solu√ß√µes ideais
        ideal_positive = []
        ideal_negative = []
        
        for i, criterion in enumerate(criteria):
            if criterion.criterion_type == CriterionType.BENEFIT:
                ideal_positive.append(np.max(weighted_matrix[:, i]))
                ideal_negative.append(np.min(weighted_matrix[:, i]))
            else:  # COST or TARGET
                ideal_positive.append(np.min(weighted_matrix[:, i]))
                ideal_negative.append(np.max(weighted_matrix[:, i]))
        
        ideal_positive = np.array(ideal_positive)
        ideal_negative = np.array(ideal_negative)
        
        # Calcular dist√¢ncias
        distances_positive = np.sqrt(np.sum((weighted_matrix - ideal_positive)**2, axis=1))
        distances_negative = np.sqrt(np.sum((weighted_matrix - ideal_negative)**2, axis=1))
        
        # Calcular scores TOPSIS
        topsis_scores = distances_negative / (distances_positive + distances_negative)
        
        # Atribuir scores √†s alternativas
        for i, alt in enumerate(alternatives):
            alt.final_score = topsis_scores[i]
            alt.scores['topsis'] = topsis_scores[i]
        
        # Ranking
        alternatives.sort(key=lambda x: x.final_score, reverse=True)
        for i, alt in enumerate(alternatives):
            alt.rank = i + 1
        
        logger.info("‚úÖ An√°lise TOPSIS conclu√≠da")
        return alternatives
    
    def perform_sensitivity_analysis(
        self,
        alternatives: List[Alternative],
        criteria: List[Criterion],
        base_result: MCDAResult
    ) -> Dict[str, Any]:
        """
        üìà Realizar an√°lise de sensibilidade
        
        Args:
            alternatives: Lista de alternativas
            criteria: Lista de crit√©rios
            base_result: Resultado base
            
        Returns:
            An√°lise de sensibilidade
        """
        logger.info("üìà Realizando an√°lise de sensibilidade")
        
        sensitivity_results = {
            'weight_variations': {},
            'rank_stability': {},
            'critical_weights': {}
        }
        
        # Testar varia√ß√µes de pesos
        steps = self.config['sensitivity_steps']
        
        for criterion in criteria:
            criterion_name = criterion.name.lower().replace(' ', '_')
            original_weight = criterion.weight
            
            weight_variations = np.linspace(0.05, 0.95, steps)
            rank_changes = []
            
            for new_weight in weight_variations:
                # Ajustar pesos (manter soma = 1)
                temp_criteria = criteria.copy()
                remaining_weight = 1.0 - new_weight
                other_criteria = [c for c in temp_criteria if c != criterion]
                
                if other_criteria:
                    weight_factor = remaining_weight / sum(c.weight for c in other_criteria)
                    for c in other_criteria:
                        c.weight *= weight_factor
                
                criterion.weight = new_weight
                
                # Recalcular scores
                temp_alternatives = [alt for alt in alternatives]  # C√≥pia
                temp_alternatives = self.calculate_ahp_scores(temp_alternatives, temp_criteria)
                
                # Calcular mudan√ßa no ranking
                rank_change = self._calculate_rank_change(base_result.alternatives, temp_alternatives)
                rank_changes.append(rank_change)
                
                # Restaurar peso original
                criterion.weight = original_weight
                for c in other_criteria:
                    c.weight /= weight_factor
            
            sensitivity_results['weight_variations'][criterion_name] = {
                'weights': weight_variations.tolist(),
                'rank_changes': rank_changes
            }
        
        logger.info("‚úÖ An√°lise de sensibilidade conclu√≠da")
        return sensitivity_results
    
    def _calculate_rank_change(
        self, 
        original_alternatives: List[Alternative], 
        new_alternatives: List[Alternative]
    ) -> float:
        """Calcular mudan√ßa m√©dia no ranking"""
        original_ranks = {alt.id: alt.rank for alt in original_alternatives}
        
        total_change = 0
        for alt in new_alternatives:
            if alt.id in original_ranks:
                total_change += abs(alt.rank - original_ranks[alt.id])
        
        return total_change / len(new_alternatives) if new_alternatives else 0
    
    def visualize_mcda_results(
        self,
        result: MCDAResult,
        save_path: Optional[str] = None
    ) -> None:
        """
        üìä Visualizar resultados MCDA
        
        Args:
            result: Resultado da an√°lise
            save_path: Caminho para salvar
        """
        logger.info("üìä Criando visualiza√ß√£o dos resultados MCDA")
        
        fig, axes = plt.subplots(2, 2, figsize=(20, 16))
        fig.suptitle(f'An√°lise MCDA - {result.objective.value.title()}', 
                    fontsize=16, fontweight='bold')
        
        # 1. Mapa de adequa√ß√£o espacial
        ax1 = axes[0, 0]
        self._plot_suitability_map(result.alternatives, ax1)
        ax1.set_title('Adequa√ß√£o Espacial')
        
        # 2. Distribui√ß√£o de scores
        ax2 = axes[0, 1]
        self._plot_score_distribution(result.alternatives, ax2)
        ax2.set_title('Distribui√ß√£o de Scores')
        
        # 3. Import√¢ncia dos crit√©rios
        ax3 = axes[1, 0]
        self._plot_criteria_weights(result.criteria, ax3)
        ax3.set_title('Import√¢ncia dos Crit√©rios')
        
        # 4. Top alternativas
        ax4 = axes[1, 1]
        self._plot_top_alternatives(result.alternatives[:10], ax4)
        ax4.set_title('Top 10 Alternativas')
        
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            logger.info(f"üíæ Visualiza√ß√£o salva: {save_path}")
        
        plt.show()
    
    def _plot_suitability_map(self, alternatives: List[Alternative], ax):
        """Plotar mapa de adequa√ß√£o"""
        # Extrair coordenadas e scores
        lats = [alt.latitude for alt in alternatives]
        lons = [alt.longitude for alt in alternatives]
        scores = [alt.final_score for alt in alternatives]
        
        # Criar scatter plot
        scatter = ax.scatter(lons, lats, c=scores, cmap='RdYlGn', 
                           s=30, alpha=0.7)
        
        # Configurar mapa
        ax.set_xlabel('Longitude')
        ax.set_ylabel('Latitude')
        ax.grid(True, alpha=0.3)
        
        # Colorbar
        plt.colorbar(scatter, ax=ax, label='Score de Adequa√ß√£o')
        
        # Marcar top 5 alternativas
        top_alternatives = sorted(alternatives, key=lambda x: x.final_score, reverse=True)[:5]
        for i, alt in enumerate(top_alternatives):
            ax.plot(alt.longitude, alt.latitude, 'r*', markersize=15)
            ax.annotate(f'{i+1}', (alt.longitude, alt.latitude), 
                       xytext=(5, 5), textcoords='offset points',
                       fontweight='bold', color='red')
    
    def _plot_score_distribution(self, alternatives: List[Alternative], ax):
        """Plotar distribui√ß√£o de scores"""
        scores = [alt.final_score for alt in alternatives]
        
        # Histograma
        ax.hist(scores, bins=30, alpha=0.7, color='skyblue', edgecolor='black')
        ax.axvline(np.mean(scores), color='red', linestyle='--', 
                  label=f'M√©dia: {np.mean(scores):.3f}')
        ax.axvline(np.median(scores), color='green', linestyle='--',
                  label=f'Mediana: {np.median(scores):.3f}')
        
        ax.set_xlabel('Score de Adequa√ß√£o')
        ax.set_ylabel('Frequ√™ncia')
        ax.legend()
        ax.grid(True, alpha=0.3)
    
    def _plot_criteria_weights(self, criteria: List[Criterion], ax):
        """Plotar import√¢ncia dos crit√©rios"""
        names = [c.name for c in criteria]
        weights = [c.weight for c in criteria]
        
        bars = ax.barh(names, weights, color='lightcoral')
        ax.set_xlabel('Peso')
        ax.set_xlim(0, max(weights) * 1.1)
        
        # Adicionar valores nas barras
        for bar, weight in zip(bars, weights):
            width = bar.get_width()
            ax.text(width + 0.01, bar.get_y() + bar.get_height()/2,
                   f'{weight:.3f}', ha='left', va='center')
    
    def _plot_top_alternatives(self, alternatives: List[Alternative], ax):
        """Plotar top alternativas"""
        names = [f"{alt.name}\n({alt.latitude:.2f}, {alt.longitude:.2f})" 
                for alt in alternatives]
        scores = [alt.final_score for alt in alternatives]
        
        bars = ax.bar(range(len(names)), scores, color='lightgreen')
        ax.set_xticks(range(len(names)))
        ax.set_xticklabels(names, rotation=45, ha='right')
        ax.set_ylabel('Score')
        
        # Adicionar valores nas barras
        for bar, score in zip(bars, scores):
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2, height + 0.01,
                   f'{score:.3f}', ha='center', va='bottom')
    
    def export_results(
        self,
        result: MCDAResult,
        format: str = 'geojson',
        filename: Optional[str] = None
    ) -> str:
        """
        üíæ Exportar resultados MCDA
        
        Args:
            result: Resultado da an√°lise
            format: Formato ('geojson', 'csv', 'json')
            filename: Nome do ficheiro
            
        Returns:
            Caminho do ficheiro exportado
        """
        if filename is None:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"mcda_{result.objective.value}_{timestamp}"
        
        if format.lower() == 'geojson':
            # Criar GeoDataFrame
            data = []
            for alt in result.alternatives:
                data.append({
                    'id': alt.id,
                    'name': alt.name,
                    'final_score': alt.final_score,
                    'rank': alt.rank,
                    'geometry': f"POINT({alt.longitude} {alt.latitude})",
                    **alt.criteria_values,
                    **alt.scores
                })
            
            gdf = gpd.GeoDataFrame(data, crs='EPSG:4326')
            export_path = self.output_dir / f"{filename}.geojson"
            gdf.to_file(export_path, driver='GeoJSON')
            
        elif format.lower() == 'csv':
            # Criar DataFrame
            data = []
            for alt in result.alternatives:
                row = {
                    'id': alt.id,
                    'name': alt.name,
                    'latitude': alt.latitude,
                    'longitude': alt.longitude,
                    'final_score': alt.final_score,
                    'rank': alt.rank
                }
                row.update(alt.criteria_values)
                row.update(alt.scores)
                data.append(row)
            
            df = pd.DataFrame(data)
            export_path = self.output_dir / f"{filename}.csv"
            df.to_csv(export_path, index=False)
            
        elif format.lower() == 'json':
            # Exportar como JSON
            export_data = {
                'objective': result.objective.value,
                'method': result.method,
                'created_at': result.created_at.isoformat(),
                'criteria': [
                    {
                        'name': c.name,
                        'weight': c.weight,
                        'type': c.criterion_type.value,
                        'unit': c.unit
                    } for c in result.criteria
                ],
                'alternatives': [
                    {
                        'id': alt.id,
                        'name': alt.name,
                        'latitude': alt.latitude,
                        'longitude': alt.longitude,
                        'final_score': alt.final_score,
                        'rank': alt.rank,
                        'criteria_values': alt.criteria_values,
                        'scores': alt.scores
                    } for alt in result.alternatives
                ]
            }
            
            export_path = self.output_dir / f"{filename}.json"
            with open(export_path, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False)
        
        else:
            raise ValueError(f"‚ùå Formato {format} n√£o suportado")
        
        logger.info(f"üíæ Resultados exportados: {export_path}")
        return str(export_path)

# Exemplo de uso
if __name__ == "__main__":
    def main():
        # Inicializar servi√ßo
        mcda_service = MCDAService()
        
        logger.info("üéØ Iniciando an√°lise MCDA para aquacultura")
        
        try:
            # Definir objetivo
            objective = PlanningObjective.AQUACULTURE
            
            # Criar grelha espacial
            alternatives = mcda_service.create_spatial_grid()
            logger.info(f"‚úÖ Criadas {len(alternatives)} alternativas")
            
            # Preencher valores dos crit√©rios
            alternatives = mcda_service.populate_criteria_values(alternatives, objective)
            
            # Configurar crit√©rios AHP
            criteria = mcda_service.setup_ahp_criteria(objective)
            logger.info(f"‚úÖ Configurados {len(criteria)} crit√©rios")
            
            # Calcular scores AHP
            alternatives = mcda_service.calculate_ahp_scores(alternatives, criteria)
            
            # Criar resultado
            result = MCDAResult(
                objective=objective,
                method='AHP',
                alternatives=alternatives,
                criteria=criteria,
                weights={c.name: c.weight for c in criteria}
            )
            
            # Mostrar top 10 resultados
            logger.info("\nüèÜ Top 10 Localiza√ß√µes para Aquacultura:")
            for alt in alternatives[:10]:
                logger.info(f"{alt.rank:2d}. {alt.name} - Score: {alt.final_score:.3f} "
                      f"({alt.latitude:.2f}, {alt.longitude:.2f})")
            
            # Visualizar resultados
            mcda_service.visualize_mcda_results(result)
            
            # Exportar resultados
            export_path = mcda_service.export_results(result, 'geojson')
            logger.info(f"üíæ Resultados exportados: {export_path}")
            
        except Exception as e:
            logger.info(f"‚ùå Erro: {str(e)}")
    
    main()
