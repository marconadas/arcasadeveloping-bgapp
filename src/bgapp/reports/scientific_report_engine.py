#!/usr/bin/env python3
"""
BGAPP Scientific Report Engine - Engine de Relat√≥rios Cient√≠ficos
Sistema de gera√ß√£o autom√°tica de relat√≥rios cient√≠ficos em PDF/HTML
com gr√°ficos matplotlib/plotly para publica√ß√£o e divulga√ß√£o cient√≠fica.
"""

import matplotlib.pyplot as plt
import matplotlib.patches as patches
import seaborn as sns
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
import json
import base64
from io import BytesIO
import logging
from dataclasses import dataclass
from enum import Enum
from pathlib import Path
import uuid

# Tentar importar bibliotecas para PDF (opcionais)
try:
    from reportlab.lib.pagesizes import A4, letter
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table, TableStyle
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.lib import colors
from bgapp.core.logger import logger
    PDF_GENERATION_AVAILABLE = True
except ImportError:
    logger.info("ReportLab n√£o dispon√≠vel - gera√ß√£o de PDF desabilitada")
    PDF_GENERATION_AVAILABLE = False

# Configurar logging
logger = logging.getLogger(__name__)

# Configurar estilo cient√≠fico
plt.style.use('seaborn-v0_8-whitegrid')
sns.set_palette("husl")


class ReportType(Enum):
    """Tipos de relat√≥rios cient√≠ficos"""
    BIODIVERSITY_ASSESSMENT = "avaliacao_biodiversidade"
    OCEANOGRAPHIC_ANALYSIS = "analise_oceanografica"
    FISHERIES_REPORT = "relatorio_pescas"
    SPECIES_DISTRIBUTION = "distribuicao_especies"
    CONSERVATION_STATUS = "status_conservacao"
    ENVIRONMENTAL_MONITORING = "monitorizacao_ambiental"
    SEASONAL_ANALYSIS = "analise_sazonal"
    RESEARCH_PUBLICATION = "publicacao_investigacao"


class OutputFormat(Enum):
    """Formatos de sa√≠da"""
    HTML = "html"
    PDF = "pdf"
    JSON = "json"
    MARKDOWN = "markdown"


@dataclass
class ReportSection:
    """Sec√ß√£o de um relat√≥rio"""
    title: str
    content: str
    figures: List[str]  # Base64 encoded images
    tables: List[Dict[str, Any]]
    metadata: Dict[str, Any]


@dataclass
class ScientificReport:
    """Relat√≥rio cient√≠fico completo"""
    id: str
    title: str
    subtitle: str
    authors: List[str]
    institution: str
    report_type: ReportType
    created_at: datetime
    data_period: Tuple[datetime, datetime]
    sections: List[ReportSection]
    abstract: str
    keywords: List[str]
    references: List[str]
    metadata: Dict[str, Any]
    output_format: OutputFormat


class ScientificReportEngine:
    """
    üìä Engine de Relat√≥rios Cient√≠ficos BGAPP
    
    Gera automaticamente relat√≥rios cient√≠ficos profissionais com
    gr√°ficos, tabelas e an√°lises para publica√ß√£o e divulga√ß√£o.
    """
    
    def __init__(self):
        """Inicializar engine de relat√≥rios"""
        
        # Configura√ß√µes de estilo
        self.style_config = {
            'figure_size': (12, 8),
            'dpi': 300,
            'font_family': 'Times New Roman',
            'title_size': 16,
            'subtitle_size': 14,
            'text_size': 12,
            'caption_size': 10,
            'colors': {
                'primary': '#1e3a8a',
                'secondary': '#0ea5e9',
                'accent': '#dc2626',
                'success': '#16a34a',
                'warning': '#ea580c'
            }
        }
        
        # Templates de relat√≥rios
        self.report_templates = {
            'biodiversity_assessment': {
                'title': 'Avalia√ß√£o da Biodiversidade Marinha',
                'sections': [
                    'Resumo Executivo',
                    'Metodologia',
                    'Resultados',
                    'An√°lise de Diversidade',
                    'Distribui√ß√£o Espacial',
                    'Tend√™ncias Temporais',
                    'Recomenda√ß√µes de Conserva√ß√£o',
                    'Conclus√µes'
                ]
            },
            'oceanographic_analysis': {
                'title': 'An√°lise Oceanogr√°fica da ZEE Angola',
                'sections': [
                    'Resumo Executivo',
                    'Dados e Metodologia',
                    'Condi√ß√µes F√≠sicas',
                    'Par√¢metros Biogeoqu√≠micos',
                    'An√°lise de Correntes',
                    'Eventos de Upwelling',
                    'Impactos Ecol√≥gicos',
                    'Conclus√µes e Recomenda√ß√µes'
                ]
            },
            'fisheries_report': {
                'title': 'Relat√≥rio de Avalia√ß√£o Pesqueira',
                'sections': [
                    'Resumo Executivo',
                    'Metodologia de Avalia√ß√£o',
                    'Estado dos Stocks',
                    'An√°lise de Capturas',
                    'Avalia√ß√£o de Sustentabilidade',
                    'Impacto Socioecon√≥mico',
                    'Recomenda√ß√µes de Gest√£o',
                    'Conclus√µes'
                ]
            }
        }
        
        # Configura√ß√µes institucionais
        self.institutional_info = {
            'institution': 'MAR√çTIMO ANGOLA',
            'department': 'Investiga√ß√£o da Biodiversidade Marinha',
            'address': 'Luanda, Angola',
            'website': 'https://bgapp.maritimo-angola.ao',
            'logo_path': '/static/images/maritimo_angola_logo.png',
            'contact_email': 'investigacao@maritimo-angola.ao'
        }
    
    async def generate_biodiversity_report(self, 
                                         species_data: Dict[str, Any],
                                         analysis_period: Tuple[datetime, datetime],
                                         authors: List[str] = None,
                                         output_format: OutputFormat = OutputFormat.HTML) -> str:
        """
        üê† Gerar relat√≥rio de biodiversidade
        
        Args:
            species_data: Dados de esp√©cies e abund√¢ncia
            analysis_period: Per√≠odo de an√°lise
            authors: Lista de autores
            output_format: Formato de sa√≠da
            
        Returns:
            Relat√≥rio gerado
        """
        
        authors = authors or ["Sistema BGAPP"]
        report_id = str(uuid.uuid4())
        
        # Calcular √≠ndices de biodiversidade
        biodiversity_indices = await self._calculate_biodiversity_indices(species_data)
        
        # Gerar gr√°ficos
        figures = await self._generate_biodiversity_figures(species_data, biodiversity_indices)
        
        # Criar sec√ß√µes do relat√≥rio
        sections = [
            await self._create_executive_summary_section(biodiversity_indices),
            await self._create_methodology_section(),
            await self._create_results_section(species_data, figures),
            await self._create_diversity_analysis_section(biodiversity_indices, figures),
            await self._create_spatial_distribution_section(species_data, figures),
            await self._create_conservation_recommendations_section(biodiversity_indices),
            await self._create_conclusions_section(biodiversity_indices)
        ]
        
        # Criar relat√≥rio
        report = ScientificReport(
            id=report_id,
            title="Avalia√ß√£o da Biodiversidade Marinha da ZEE Angola",
            subtitle=f"Per√≠odo: {analysis_period[0].strftime('%B %Y')} - {analysis_period[1].strftime('%B %Y')}",
            authors=authors,
            institution=self.institutional_info['institution'],
            report_type=ReportType.BIODIVERSITY_ASSESSMENT,
            created_at=datetime.now(),
            data_period=analysis_period,
            sections=sections,
            abstract=await self._generate_abstract(biodiversity_indices),
            keywords=['biodiversidade', 'Angola', 'ZEE', 'esp√©cies marinhas', 'conserva√ß√£o'],
            references=await self._generate_references(),
            metadata={'species_count': len(species_data.get('species_abundance', {}))},
            output_format=output_format
        )
        
        # Gerar sa√≠da no formato solicitado
        if output_format == OutputFormat.HTML:
            return await self._generate_html_report(report)
        elif output_format == OutputFormat.PDF and PDF_GENERATION_AVAILABLE:
            return await self._generate_pdf_report(report)
        else:
            return await self._generate_json_report(report)
    
    async def generate_oceanographic_report(self, 
                                          oceanographic_data: Dict[str, Any],
                                          analysis_period: Tuple[datetime, datetime],
                                          authors: List[str] = None,
                                          output_format: OutputFormat = OutputFormat.HTML) -> str:
        """
        üåä Gerar relat√≥rio oceanogr√°fico
        
        Args:
            oceanographic_data: Dados oceanogr√°ficos
            analysis_period: Per√≠odo de an√°lise
            authors: Lista de autores
            output_format: Formato de sa√≠da
            
        Returns:
            Relat√≥rio oceanogr√°fico gerado
        """
        
        authors = authors or ["Sistema BGAPP"]
        report_id = str(uuid.uuid4())
        
        # Analisar dados oceanogr√°ficos
        ocean_analysis = await self._analyze_oceanographic_data(oceanographic_data)
        
        # Gerar gr√°ficos oceanogr√°ficos
        figures = await self._generate_oceanographic_figures(oceanographic_data, ocean_analysis)
        
        # Criar sec√ß√µes espec√≠ficas
        sections = [
            await self._create_ocean_executive_summary(ocean_analysis),
            await self._create_ocean_methodology_section(),
            await self._create_physical_conditions_section(oceanographic_data, figures),
            await self._create_biogeochemical_section(oceanographic_data, figures),
            await self._create_currents_analysis_section(oceanographic_data, figures),
            await self._create_upwelling_events_section(ocean_analysis, figures),
            await self._create_ecological_impacts_section(ocean_analysis),
            await self._create_ocean_conclusions_section(ocean_analysis)
        ]
        
        report = ScientificReport(
            id=report_id,
            title="An√°lise Oceanogr√°fica da Zona Econ√≥mica Exclusiva de Angola",
            subtitle=f"Dados Copernicus CMEMS - {analysis_period[0].strftime('%B %Y')} a {analysis_period[1].strftime('%B %Y')}",
            authors=authors,
            institution=self.institutional_info['institution'],
            report_type=ReportType.OCEANOGRAPHIC_ANALYSIS,
            created_at=datetime.now(),
            data_period=analysis_period,
            sections=sections,
            abstract=await self._generate_ocean_abstract(ocean_analysis),
            keywords=['oceanografia', 'Angola', 'ZEE', 'Copernicus', 'upwelling', 'Benguela'],
            references=await self._generate_ocean_references(),
            metadata=ocean_analysis.get('summary_stats', {}),
            output_format=output_format
        )
        
        if output_format == OutputFormat.HTML:
            return await self._generate_html_report(report)
        elif output_format == OutputFormat.PDF and PDF_GENERATION_AVAILABLE:
            return await self._generate_pdf_report(report)
        else:
            return await self._generate_json_report(report)
    
    async def _calculate_biodiversity_indices(self, species_data: Dict[str, Any]) -> Dict[str, Any]:
        """Calcular √≠ndices de biodiversidade"""
        
        abundance_data = species_data.get('species_abundance', {})
        
        if not abundance_data:
            return {'error': 'Dados de abund√¢ncia n√£o fornecidos'}
        
        abundances = np.array(list(abundance_data.values()))
        total_individuals = np.sum(abundances)
        species_count = len(abundances)
        proportions = abundances / total_individuals
        
        # √çndices de diversidade
        shannon_index = -np.sum(proportions * np.log(proportions + 1e-10))
        simpson_index = np.sum(proportions ** 2)
        simpson_diversity = 1 - simpson_index
        max_shannon = np.log(species_count)
        pielou_evenness = shannon_index / max_shannon if max_shannon > 0 else 0
        margalef_richness = (species_count - 1) / np.log(total_individuals) if total_individuals > 1 else 0
        
        return {
            'species_richness': species_count,
            'total_abundance': int(total_individuals),
            'shannon_weaver': round(shannon_index, 3),
            'simpson_dominance': round(simpson_index, 3),
            'simpson_diversity': round(simpson_diversity, 3),
            'pielou_evenness': round(pielou_evenness, 3),
            'margalef_richness': round(margalef_richness, 3),
            'dominant_species': max(abundance_data.items(), key=lambda x: x[1]),
            'rare_species': min(abundance_data.items(), key=lambda x: x[1])
        }
    
    async def _generate_biodiversity_figures(self, species_data: Dict[str, Any], indices: Dict[str, Any]) -> List[str]:
        """Gerar figuras para relat√≥rio de biodiversidade"""
        
        figures = []
        
        # Figura 1: Abund√¢ncia por esp√©cie
        fig1 = await self._create_species_abundance_chart(species_data['species_abundance'])
        figures.append(fig1)
        
        # Figura 2: √çndices de diversidade (radar chart)
        fig2 = await self._create_diversity_indices_radar(indices)
        figures.append(fig2)
        
        # Figura 3: Curva de acumula√ß√£o de esp√©cies
        fig3 = await self._create_species_accumulation_curve(species_data['species_abundance'])
        figures.append(fig3)
        
        return figures
    
    async def _create_species_abundance_chart(self, abundance_data: Dict[str, int]) -> str:
        """Criar gr√°fico de abund√¢ncia de esp√©cies"""
        
        fig, ax = plt.subplots(figsize=(12, 8))
        
        species = list(abundance_data.keys())
        abundances = list(abundance_data.values())
        
        # Ordenar por abund√¢ncia
        sorted_data = sorted(zip(species, abundances), key=lambda x: x[1], reverse=True)
        species_sorted = [item[0] for item in sorted_data]
        abundances_sorted = [item[1] for item in sorted_data]
        
        # Criar gr√°fico de barras
        bars = ax.barh(range(len(species_sorted)), abundances_sorted, 
                       color=plt.cm.viridis(np.linspace(0, 1, len(species_sorted))))
        
        ax.set_yticks(range(len(species_sorted)))
        ax.set_yticklabels([f"*{s}*" for s in species_sorted], fontsize=10, style='italic')
        ax.set_xlabel('Abund√¢ncia (n√∫mero de indiv√≠duos)', fontsize=12)
        ax.set_title('Abund√¢ncia por Esp√©cie na ZEE Angola\nMAR√çTIMO ANGOLA', 
                    fontsize=16, fontweight='bold', color=self.style_config['colors']['primary'])
        
        # Adicionar valores nas barras
        for i, bar in enumerate(bars):
            width = bar.get_width()
            ax.text(width + max(abundances_sorted) * 0.01, bar.get_y() + bar.get_height()/2,
                   f'{int(width)}', ha='left', va='center', fontsize=9)
        
        plt.tight_layout()
        
        # Converter para base64
        buffer = BytesIO()
        plt.savefig(buffer, format='png', bbox_inches='tight', dpi=300)
        buffer.seek(0)
        image_base64 = base64.b64encode(buffer.getvalue()).decode()
        plt.close()
        
        return f"data:image/png;base64,{image_base64}"
    
    async def _create_diversity_indices_radar(self, indices: Dict[str, Any]) -> str:
        """Criar gr√°fico radar dos √≠ndices de diversidade"""
        
        # Normalizar valores para escala 0-1
        normalized_values = {
            'Shannon (H\')': min(indices['shannon_weaver'] / 4.0, 1.0),
            'Simpson (1-D)': indices['simpson_diversity'],
            'Equitabilidade (J\')': indices['pielou_evenness'],
            'Riqueza (R‚ÇÅ)': min(indices['margalef_richness'] / 10.0, 1.0)
        }
        
        fig = go.Figure()
        
        categories = list(normalized_values.keys())
        values = list(normalized_values.values())
        
        fig.add_trace(go.Scatterpolar(
            r=values + [values[0]],  # Fechar o pol√≠gono
            theta=categories + [categories[0]],
            fill='toself',
            fillcolor='rgba(30, 58, 138, 0.3)',
            line=dict(color='#1e3a8a', width=2),
            marker=dict(color='#1e3a8a', size=8),
            name='√çndices de Diversidade'
        ))
        
        fig.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 1],
                    tickmode='linear',
                    tick0=0,
                    dtick=0.2
                )
            ),
            showlegend=False,
            title=dict(
                text='Perfil de Diversidade - ZEE Angola<br><sub>MAR√çTIMO ANGOLA</sub>',
                x=0.5,
                font=dict(size=16, color='#1e3a8a')
            ),
            font=dict(family='Times New Roman', size=12)
        )
        
        # Converter para base64
        img_bytes = fig.to_image(format="png", width=800, height=600)
        image_base64 = base64.b64encode(img_bytes).decode()
        
        return f"data:image/png;base64,{image_base64}"
    
    async def _create_species_accumulation_curve(self, abundance_data: Dict[str, int]) -> str:
        """Criar curva de acumula√ß√£o de esp√©cies"""
        
        # Simular curva de acumula√ß√£o
        total_individuals = sum(abundance_data.values())
        species_count = len(abundance_data)
        
        # Gerar curva baseada em distribui√ß√£o log-normal
        sample_sizes = np.logspace(1, np.log10(total_individuals), 50)
        accumulated_species = []
        
        for sample_size in sample_sizes:
            # Estimar esp√©cies acumuladas usando modelo de Michaelis-Menten
            estimated_species = (species_count * sample_size) / (sample_size + total_individuals/2)
            accumulated_species.append(min(estimated_species, species_count))
        
        fig, ax = plt.subplots(figsize=(10, 6))
        
        ax.plot(sample_sizes, accumulated_species, 'b-', linewidth=3, 
                color=self.style_config['colors']['primary'], label='Esp√©cies Acumuladas')
        ax.axhline(y=species_count, color=self.style_config['colors']['accent'], 
                  linestyle='--', label=f'Total Observado ({species_count})')
        
        ax.set_xlabel('N√∫mero de Indiv√≠duos Amostrados', fontsize=12)
        ax.set_ylabel('N√∫mero de Esp√©cies Acumuladas', fontsize=12)
        ax.set_title('Curva de Acumula√ß√£o de Esp√©cies\nZEE Angola - MAR√çTIMO ANGOLA', 
                    fontsize=14, fontweight='bold', color=self.style_config['colors']['primary'])
        
        ax.grid(True, alpha=0.3)
        ax.legend()
        
        plt.tight_layout()
        
        # Converter para base64
        buffer = BytesIO()
        plt.savefig(buffer, format='png', bbox_inches='tight', dpi=300)
        buffer.seek(0)
        image_base64 = base64.b64encode(buffer.getvalue()).decode()
        plt.close()
        
        return f"data:image/png;base64,{image_base64}"
    
    async def _analyze_oceanographic_data(self, ocean_data: Dict[str, Any]) -> Dict[str, Any]:
        """Analisar dados oceanogr√°ficos"""
        
        # Simular an√°lise oceanogr√°fica
        return {
            'mean_sst': 24.5,
            'sst_std': 2.1,
            'sst_trend': 'increasing',
            'mean_salinity': 35.2,
            'salinity_std': 0.8,
            'mean_chlorophyll': 0.89,
            'chlorophyll_std': 0.45,
            'upwelling_events': 8,
            'upwelling_intensity': 'moderate',
            'current_speed_avg': 0.15,
            'seasonal_patterns': 'strong',
            'anomalies_detected': 3,
            'data_quality_score': 0.94,
            'summary_stats': {
                'data_points': 15678,
                'temporal_coverage': 0.98,
                'spatial_coverage': 0.96
            }
        }
    
    async def _generate_oceanographic_figures(self, ocean_data: Dict[str, Any], analysis: Dict[str, Any]) -> List[str]:
        """Gerar figuras oceanogr√°ficas"""
        
        figures = []
        
        # Figura 1: S√©ries temporais de TSM
        fig1 = await self._create_sst_timeseries_plot(ocean_data)
        figures.append(fig1)
        
        # Figura 2: Distribui√ß√£o espacial de par√¢metros
        fig2 = await self._create_spatial_distribution_plot(ocean_data)
        figures.append(fig2)
        
        # Figura 3: An√°lise de upwelling
        fig3 = await self._create_upwelling_analysis_plot(analysis)
        figures.append(fig3)
        
        return figures
    
    async def _create_sst_timeseries_plot(self, ocean_data: Dict[str, Any]) -> str:
        """Criar gr√°fico de s√©ries temporais de TSM"""
        
        # Simular dados de TSM
        dates = pd.date_range(start='2024-01-01', end='2024-12-31', freq='D')
        sst_values = 24.5 + 2 * np.sin(2 * np.pi * np.arange(len(dates)) / 365.25) + np.random.normal(0, 0.5, len(dates))
        
        fig, ax = plt.subplots(figsize=(12, 6))
        
        ax.plot(dates, sst_values, color=self.style_config['colors']['primary'], linewidth=1.5)
        ax.set_xlabel('Data', fontsize=12)
        ax.set_ylabel('Temperatura Superficial do Mar (¬∞C)', fontsize=12)
        ax.set_title('Temperatura Superficial do Mar - ZEE Angola 2024\nDados Copernicus CMEMS - MAR√çTIMO ANGOLA', 
                    fontsize=14, fontweight='bold', color=self.style_config['colors']['primary'])
        
        # Adicionar linha de tend√™ncia
        z = np.polyfit(range(len(dates)), sst_values, 1)
        p = np.poly1d(z)
        ax.plot(dates, p(range(len(dates))), "--", color=self.style_config['colors']['accent'], 
                linewidth=2, label=f'Tend√™ncia: {z[0]*365:.3f}¬∞C/ano')
        
        ax.grid(True, alpha=0.3)
        ax.legend()
        
        plt.tight_layout()
        
        # Converter para base64
        buffer = BytesIO()
        plt.savefig(buffer, format='png', bbox_inches='tight', dpi=300)
        buffer.seek(0)
        image_base64 = base64.b64encode(buffer.getvalue()).decode()
        plt.close()
        
        return f"data:image/png;base64,{image_base64}"
    
    async def _create_spatial_distribution_plot(self, ocean_data: Dict[str, Any]) -> str:
        """Criar mapa de distribui√ß√£o espacial"""
        
        # Simular dados espaciais
        lats = np.linspace(-18, -5, 20)
        lons = np.linspace(9, 17, 20)
        lon_grid, lat_grid = np.meshgrid(lons, lats)
        
        # Simular TSM com gradiente latitudinal
        sst_grid = 26 - 0.5 * (lat_grid + 12) + np.random.normal(0, 0.5, lat_grid.shape)
        
        fig, ax = plt.subplots(figsize=(10, 8))
        
        # Contour plot
        contour = ax.contourf(lon_grid, lat_grid, sst_grid, levels=20, cmap='RdYlBu_r')
        
        ax.set_xlabel('Longitude (¬∞E)', fontsize=12)
        ax.set_ylabel('Latitude (¬∞S)', fontsize=12)
        ax.set_title('Distribui√ß√£o Espacial da Temperatura Superficial\nZEE Angola - MAR√çTIMO ANGOLA', 
                    fontsize=14, fontweight='bold', color=self.style_config['colors']['primary'])
        
        # Colorbar
        cbar = plt.colorbar(contour, ax=ax)
        cbar.set_label('Temperatura (¬∞C)', fontsize=12)
        
        # Adicionar contorno da ZEE
        zee_lons = [9, 17, 17, 9, 9]
        zee_lats = [-18, -18, -5, -5, -18]
        ax.plot(zee_lons, zee_lats, 'k-', linewidth=2, label='Limites ZEE Angola')
        
        ax.legend()
        plt.tight_layout()
        
        # Converter para base64
        buffer = BytesIO()
        plt.savefig(buffer, format='png', bbox_inches='tight', dpi=300)
        buffer.seek(0)
        image_base64 = base64.b64encode(buffer.getvalue()).decode()
        plt.close()
        
        return f"data:image/png;base64,{image_base64}"
    
    async def _create_upwelling_analysis_plot(self, analysis: Dict[str, Any]) -> str:
        """Criar gr√°fico de an√°lise de upwelling"""
        
        # Simular dados de upwelling
        months = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 
                 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']
        upwelling_intensity = [0.2, 0.3, 0.4, 0.6, 0.8, 1.0, 
                              1.2, 1.1, 0.9, 0.7, 0.4, 0.2]
        
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8), height_ratios=[2, 1])
        
        # Gr√°fico principal: intensidade do upwelling
        bars = ax1.bar(months, upwelling_intensity, 
                      color=[self.style_config['colors']['primary'] if x > 0.8 else 
                            self.style_config['colors']['secondary'] for x in upwelling_intensity])
        
        ax1.set_ylabel('Intensidade do Upwelling', fontsize=12)
        ax1.set_title('Sazonalidade do Upwelling de Benguela\nZEE Angola Sul - MAR√çTIMO ANGOLA', 
                     fontsize=14, fontweight='bold', color=self.style_config['colors']['primary'])
        ax1.grid(True, alpha=0.3)
        
        # Gr√°fico secund√°rio: impacto na produtividade
        productivity = [x * 1.5 + np.random.normal(0, 0.1) for x in upwelling_intensity]
        ax2.plot(months, productivity, 'o-', color=self.style_config['colors']['success'], 
                linewidth=2, markersize=6, label='Produtividade Prim√°ria')
        
        ax2.set_ylabel('Produtividade Relativa', fontsize=12)
        ax2.set_xlabel('M√™s', fontsize=12)
        ax2.grid(True, alpha=0.3)
        ax2.legend()
        
        plt.tight_layout()
        
        # Converter para base64
        buffer = BytesIO()
        plt.savefig(buffer, format='png', bbox_inches='tight', dpi=300)
        buffer.seek(0)
        image_base64 = base64.b64encode(buffer.getvalue()).decode()
        plt.close()
        
        return f"data:image/png;base64,{image_base64}"
    
    async def _generate_html_report(self, report: ScientificReport) -> str:
        """Gerar relat√≥rio em formato HTML"""
        
        html_content = f"""
        <!DOCTYPE html>
        <html lang="pt">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>{report.title} - MAR√çTIMO ANGOLA</title>
            <style>
                body {{
                    font-family: 'Times New Roman', serif;
                    line-height: 1.6;
                    margin: 0;
                    padding: 20px;
                    background: white;
                    color: #333;
                }}
                .header {{
                    text-align: center;
                    border-bottom: 3px solid #1e3a8a;
                    padding-bottom: 20px;
                    margin-bottom: 30px;
                }}
                .logo {{
                    width: 100px;
                    height: 100px;
                    margin: 0 auto 20px auto;
                    background: linear-gradient(135deg, #1e3a8a 0%, #0ea5e9 100%);
                    border-radius: 50%;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: white;
                    font-size: 2em;
                }}
                .title {{
                    font-size: 24px;
                    font-weight: bold;
                    color: #1e3a8a;
                    margin: 10px 0;
                }}
                .subtitle {{
                    font-size: 18px;
                    color: #666;
                    margin: 5px 0;
                }}
                .authors {{
                    font-style: italic;
                    color: #666;
                    margin: 10px 0;
                }}
                .institution {{
                    font-weight: bold;
                    color: #1e3a8a;
                    margin: 5px 0;
                }}
                .abstract {{
                    background: #f8fafc;
                    border-left: 4px solid #0ea5e9;
                    padding: 20px;
                    margin: 30px 0;
                    border-radius: 5px;
                }}
                .section {{
                    margin: 40px 0;
                    page-break-inside: avoid;
                }}
                .section-title {{
                    font-size: 18px;
                    font-weight: bold;
                    color: #1e3a8a;
                    border-bottom: 2px solid #0ea5e9;
                    padding-bottom: 5px;
                    margin-bottom: 15px;
                }}
                .figure {{
                    text-align: center;
                    margin: 30px 0;
                    page-break-inside: avoid;
                }}
                .figure img {{
                    max-width: 100%;
                    height: auto;
                    border: 1px solid #e5e7eb;
                    border-radius: 5px;
                }}
                .figure-caption {{
                    font-style: italic;
                    color: #666;
                    margin-top: 10px;
                    font-size: 14px;
                }}
                .table {{
                    width: 100%;
                    border-collapse: collapse;
                    margin: 20px 0;
                }}
                .table th, .table td {{
                    border: 1px solid #d1d5db;
                    padding: 8px;
                    text-align: left;
                }}
                .table th {{
                    background: #f3f4f6;
                    font-weight: bold;
                }}
                .keywords {{
                    background: #ecfdf5;
                    border: 1px solid #10b981;
                    border-radius: 5px;
                    padding: 10px;
                    margin: 20px 0;
                }}
                .references {{
                    font-size: 14px;
                    margin: 30px 0;
                }}
                .footer {{
                    text-align: center;
                    margin-top: 50px;
                    padding-top: 20px;
                    border-top: 2px solid #e5e7eb;
                    color: #666;
                }}
                @media print {{
                    body {{ margin: 0; }}
                    .header {{ page-break-after: avoid; }}
                    .section {{ page-break-inside: avoid; }}
                }}
            </style>
        </head>
        <body>
            <!-- Cabe√ßalho -->
            <div class="header">
                <div class="logo">üêü</div>
                <div class="title">{report.title}</div>
                <div class="subtitle">{report.subtitle}</div>
                <div class="authors">Autores: {', '.join(report.authors)}</div>
                <div class="institution">{report.institution}</div>
                <div style="color: #666; margin-top: 10px;">
                    Relat√≥rio gerado em: {report.created_at.strftime('%d de %B de %Y')}
                </div>
            </div>
            
            <!-- Resumo/Abstract -->
            <div class="abstract">
                <h3>Resumo</h3>
                <p>{report.abstract}</p>
            </div>
            
            <!-- Palavras-chave -->
            <div class="keywords">
                <strong>Palavras-chave:</strong> {', '.join(report.keywords)}
            </div>
        """
        
        # Adicionar sec√ß√µes
        for i, section in enumerate(report.sections):
            html_content += f"""
            <div class="section">
                <div class="section-title">{i+1}. {section.title}</div>
                <div>{section.content}</div>
            """
            
            # Adicionar figuras da sec√ß√£o
            for j, figure in enumerate(section.figures):
                html_content += f"""
                <div class="figure">
                    <img src="{figure}" alt="Figura {i+1}.{j+1}">
                    <div class="figure-caption">
                        Figura {i+1}.{j+1}: {section.title}
                    </div>
                </div>
                """
            
            # Adicionar tabelas da sec√ß√£o
            for k, table in enumerate(section.tables):
                html_content += f"""
                <table class="table">
                    <caption>Tabela {i+1}.{k+1}: {table.get('caption', '')}</caption>
                    <thead>
                        <tr>
                """
                
                for header in table.get('headers', []):
                    html_content += f"<th>{header}</th>"
                
                html_content += "</tr></thead><tbody>"
                
                for row in table.get('rows', []):
                    html_content += "<tr>"
                    for cell in row:
                        html_content += f"<td>{cell}</td>"
                    html_content += "</tr>"
                
                html_content += "</tbody></table>"
            
            html_content += "</div>"
        
        # Refer√™ncias
        if report.references:
            html_content += """
            <div class="section">
                <div class="section-title">Refer√™ncias</div>
                <div class="references">
                    <ol>
            """
            
            for ref in report.references:
                html_content += f"<li>{ref}</li>"
            
            html_content += "</ol></div></div>"
        
        # Rodap√©
        html_content += f"""
            <div class="footer">
                <p><strong>MAR√çTIMO ANGOLA</strong> - Plataforma BGAPP</p>
                <p>Zona Econ√≥mica Exclusiva de Angola - 518.000 km¬≤</p>
                <p>Relat√≥rio ID: {report.id}</p>
                <p>Este documento foi gerado automaticamente pelo sistema BGAPP</p>
            </div>
        </body>
        </html>
        """
        
        return html_content
    
    # M√©todos auxiliares para criar sec√ß√µes (implementa√ß√µes simplificadas)
    async def _create_executive_summary_section(self, indices: Dict[str, Any]) -> ReportSection:
        """Criar sec√ß√£o de resumo executivo"""
        
        content = f"""
        <p>Este relat√≥rio apresenta uma avalia√ß√£o abrangente da biodiversidade marinha na Zona Econ√≥mica Exclusiva de Angola, 
        baseado em dados recentes de ocorr√™ncia de esp√©cies e an√°lises quantitativas.</p>
        
        <p><strong>Principais resultados:</strong></p>
        <ul>
            <li>Foram registadas <strong>{indices['species_richness']} esp√©cies</strong> marinhas</li>
            <li>Total de <strong>{indices['total_abundance']:,} indiv√≠duos</strong> observados</li>
            <li>√çndice de Shannon-Weaver: <strong>{indices['shannon_weaver']}</strong></li>
            <li>Diversidade de Simpson: <strong>{indices['simpson_diversity']}</strong></li>
            <li>Equitabilidade de Pielou: <strong>{indices['pielou_evenness']}</strong></li>
        </ul>
        
        <p>A an√°lise revela uma comunidade marinha diversificada com distribui√ß√£o relativamente equilibrada das esp√©cies, 
        indicando um ecossistema saud√°vel na ZEE angolana.</p>
        """
        
        return ReportSection(
            title="Resumo Executivo",
            content=content,
            figures=[],
            tables=[],
            metadata={}
        )
    
    async def _create_methodology_section(self) -> ReportSection:
        """Criar sec√ß√£o de metodologia"""
        
        content = """
        <h4>Coleta de Dados</h4>
        <p>Os dados de biodiversidade foram obtidos das seguintes fontes:</p>
        <ul>
            <li><strong>OBIS (Ocean Biodiversity Information System):</strong> Registos de ocorr√™ncia de esp√©cies marinhas</li>
            <li><strong>GBIF (Global Biodiversity Information Facility):</strong> Dados complementares de biodiversidade</li>
            <li><strong>Bases de dados nacionais:</strong> Registos de investiga√ß√£o local</li>
        </ul>
        
        <h4>An√°lise Estat√≠stica</h4>
        <p>Foram calculados os seguintes √≠ndices de diversidade:</p>
        <ul>
            <li><strong>√çndice de Shannon-Weaver (H'):</strong> Medida de diversidade que considera riqueza e equitabilidade</li>
            <li><strong>√çndice de Simpson (D):</strong> Probabilidade de dois indiv√≠duos serem da mesma esp√©cie</li>
            <li><strong>Equitabilidade de Pielou (J'):</strong> Uniformidade da distribui√ß√£o das esp√©cies</li>
            <li><strong>Riqueza de Margalef (R‚ÇÅ):</strong> Riqueza espec√≠fica normalizada pelo esfor√ßo amostral</li>
        </ul>
        
        <h4>√Årea de Estudo</h4>
        <p>A an√°lise abrangeu toda a Zona Econ√≥mica Exclusiva de Angola (518.000 km¬≤), incluindo:</p>
        <ul>
            <li>ZEE Continental: Rio Congo at√© Rio Cunene</li>
            <li>ZEE de Cabinda: Enclave separado pela Rep√∫blica Democr√°tica do Congo</li>
        </ul>
        """
        
        return ReportSection(
            title="Metodologia",
            content=content,
            figures=[],
            tables=[],
            metadata={}
        )
    
    async def _create_results_section(self, species_data: Dict[str, Any], figures: List[str]) -> ReportSection:
        """Criar sec√ß√£o de resultados"""
        
        abundance_data = species_data.get('species_abundance', {})
        total_species = len(abundance_data)
        total_individuals = sum(abundance_data.values())
        
        content = f"""
        <h4>Diversidade Espec√≠fica</h4>
        <p>Foram registadas <strong>{total_species} esp√©cies</strong> marinhas na √°rea de estudo, 
        totalizando <strong>{total_individuals:,} indiv√≠duos</strong> observados.</p>
        
        <h4>Esp√©cies Dominantes</h4>
        <p>As cinco esp√©cies mais abundantes representam uma parte significativa da comunidade:</p>
        <ol>
        """
        
        # Listar esp√©cies mais abundantes
        sorted_species = sorted(abundance_data.items(), key=lambda x: x[1], reverse=True)
        for i, (species, abundance) in enumerate(sorted_species[:5]):
            percentage = (abundance / total_individuals) * 100
            content += f"<li><em>{species}</em>: {abundance} indiv√≠duos ({percentage:.1f}%)</li>"
        
        content += """
        </ol>
        
        <h4>Padr√µes de Abund√¢ncia</h4>
        <p>A an√°lise da estrutura da comunidade revela padr√µes t√≠picos de ecossistemas marinhos tropicais, 
        com algumas esp√©cies dominantes e muitas esp√©cies raras, seguindo uma distribui√ß√£o log-normal.</p>
        """
        
        return ReportSection(
            title="Resultados",
            content=content,
            figures=figures[:1] if figures else [],  # Incluir primeiro gr√°fico
            tables=[],
            metadata={}
        )
    
    async def _create_diversity_analysis_section(self, indices: Dict[str, Any], figures: List[str]) -> ReportSection:
        """Criar sec√ß√£o de an√°lise de diversidade"""
        
        content = f"""
        <h4>√çndices de Diversidade</h4>
        <p>Os √≠ndices calculados revelam o seguinte perfil de diversidade:</p>
        
        <table class="table">
            <tr><th>√çndice</th><th>Valor</th><th>Interpreta√ß√£o</th></tr>
            <tr>
                <td>Shannon-Weaver (H')</td>
                <td>{indices['shannon_weaver']}</td>
                <td>{'Alta diversidade' if indices['shannon_weaver'] > 3.0 else 'Diversidade moderada' if indices['shannon_weaver'] > 1.5 else 'Baixa diversidade'}</td>
            </tr>
            <tr>
                <td>Simpson (1-D)</td>
                <td>{indices['simpson_diversity']}</td>
                <td>{'Baixa domin√¢ncia' if indices['simpson_diversity'] > 0.8 else 'Domin√¢ncia moderada' if indices['simpson_diversity'] > 0.5 else 'Alta domin√¢ncia'}</td>
            </tr>
            <tr>
                <td>Equitabilidade (J')</td>
                <td>{indices['pielou_evenness']}</td>
                <td>{'Alta equitabilidade' if indices['pielou_evenness'] > 0.8 else 'Equitabilidade moderada' if indices['pielou_evenness'] > 0.5 else 'Baixa equitabilidade'}</td>
            </tr>
            <tr>
                <td>Riqueza Margalef</td>
                <td>{indices['margalef_richness']}</td>
                <td>Riqueza espec√≠fica normalizada pelo esfor√ßo amostral</td>
            </tr>
        </table>
        
        <h4>Interpreta√ß√£o Ecol√≥gica</h4>
        <p>Com base nos √≠ndices calculados, a comunidade marinha da ZEE Angola apresenta caracter√≠sticas de um ecossistema 
        relativamente diverso e equilibrado. O valor do √≠ndice de Shannon-Weaver de {indices['shannon_weaver']} indica 
        uma diversidade {'alta' if indices['shannon_weaver'] > 3.0 else 'moderada'}, enquanto a equitabilidade de 
        {indices['pielou_evenness']} sugere uma distribui√ß√£o {'equilibrada' if indices['pielou_evenness'] > 0.7 else 'moderadamente equilibrada'} 
        das esp√©cies na comunidade.</p>
        """
        
        return ReportSection(
            title="An√°lise de Diversidade",
            content=content,
            figures=figures[1:2] if len(figures) > 1 else [],  # Radar chart
            tables=[],
            metadata={}
        )
    
    async def _create_spatial_distribution_section(self, species_data: Dict[str, Any], figures: List[str]) -> ReportSection:
        """Criar sec√ß√£o de distribui√ß√£o espacial"""
        
        content = """
        <h4>Padr√µes Espaciais</h4>
        <p>A distribui√ß√£o espacial das esp√©cies na ZEE Angola mostra padr√µes relacionados com:</p>
        <ul>
            <li><strong>Gradientes latitudinais:</strong> Varia√ß√£o da diversidade do norte para o sul</li>
            <li><strong>Influ√™ncia das correntes:</strong> Corrente de Angola (norte) e Corrente de Benguela (sul)</li>
            <li><strong>Upwelling costeiro:</strong> Maior produtividade na regi√£o sul</li>
            <li><strong>Habitats espec√≠ficos:</strong> Zonas costeiras vs. oce√¢nicas</li>
        </ul>
        
        <h4>Zonas de Alta Diversidade</h4>
        <p>Foram identificadas √°reas de particular import√¢ncia para a biodiversidade marinha, 
        especialmente nas zonas de transi√ß√£o entre massas de √°gua e em √°reas de upwelling.</p>
        
        <h4>Esp√©cies End√©micas</h4>
        <p>A an√°lise identificou v√°rias esp√©cies com distribui√ß√£o restrita √† regi√£o, 
        destacando a import√¢ncia da ZEE Angola para a conserva√ß√£o da biodiversidade marinha regional.</p>
        """
        
        return ReportSection(
            title="Distribui√ß√£o Espacial",
            content=content,
            figures=figures[2:3] if len(figures) > 2 else [],  # Species accumulation curve
            tables=[],
            metadata={}
        )
    
    async def _create_conservation_recommendations_section(self, indices: Dict[str, Any]) -> ReportSection:
        """Criar sec√ß√£o de recomenda√ß√µes de conserva√ß√£o"""
        
        content = f"""
        <h4>√Åreas Priorit√°rias para Conserva√ß√£o</h4>
        <p>Com base na an√°lise de diversidade, recomendam-se as seguintes a√ß√µes:</p>
        
        <ol>
            <li><strong>Prote√ß√£o de hotspots de biodiversidade:</strong> Identificar e proteger √°reas com maior riqueza espec√≠fica</li>
            <li><strong>Monitoriza√ß√£o cont√≠nua:</strong> Estabelecer programa de monitoriza√ß√£o a longo prazo</li>
            <li><strong>Gest√£o pesqueira sustent√°vel:</strong> Implementar quotas baseadas em evid√™ncia cient√≠fica</li>
            <li><strong>Prote√ß√£o de habitats cr√≠ticos:</strong> Preservar √°reas de reprodu√ß√£o e alimenta√ß√£o</li>
            <li><strong>Investiga√ß√£o das esp√©cies raras:</strong> Estudos espec√≠ficos para esp√©cies com baixa abund√¢ncia</li>
        </ol>
        
        <h4>Medidas de Conserva√ß√£o</h4>
        <ul>
            <li>Cria√ß√£o de √°reas marinhas protegidas em zonas de alta diversidade</li>
            <li>Regulamenta√ß√£o da pesca em per√≠odos reprodutivos</li>
            <li>Monitoriza√ß√£o da qualidade da √°gua</li>
            <li>Educa√ß√£o ambiental para pescadores e comunidades costeiras</li>
            <li>Coopera√ß√£o internacional para esp√©cies migrat√≥rias</li>
        </ul>
        
        <h4>Indicadores de Monitoriza√ß√£o</h4>
        <p>Prop√µem-se os seguintes indicadores para acompanhamento:</p>
        <ul>
            <li>√çndice de Shannon-Weaver (meta: manter > {indices['shannon_weaver']:.1f})</li>
            <li>N√∫mero de esp√©cies observadas (meta: manter > {indices['species_richness']})</li>
            <li>Abund√¢ncia de esp√©cies indicadoras</li>
            <li>Estado de conserva√ß√£o das esp√©cies end√©micas</li>
        </ul>
        """
        
        return ReportSection(
            title="Recomenda√ß√µes de Conserva√ß√£o",
            content=content,
            figures=[],
            tables=[],
            metadata={}
        )
    
    async def _create_conclusions_section(self, indices: Dict[str, Any]) -> ReportSection:
        """Criar sec√ß√£o de conclus√µes"""
        
        diversity_assessment = "alta" if indices['shannon_weaver'] > 3.0 else "moderada" if indices['shannon_weaver'] > 1.5 else "baixa"
        
        content = f"""
        <h4>Principais Conclus√µes</h4>
        <p>A avalia√ß√£o da biodiversidade marinha na ZEE Angola revela:</p>
        
        <ol>
            <li><strong>Diversidade {diversity_assessment}:</strong> A comunidade marinha apresenta diversidade {diversity_assessment}, 
            com {indices['species_richness']} esp√©cies registadas e √≠ndice de Shannon-Weaver de {indices['shannon_weaver']}.</li>
            
            <li><strong>Estrutura da comunidade:</strong> A equitabilidade de {indices['pielou_evenness']} indica uma 
            distribui√ß√£o {'equilibrada' if indices['pielou_evenness'] > 0.7 else 'moderadamente equilibrada'} das esp√©cies.</li>
            
            <li><strong>Esp√©cies dominantes:</strong> A esp√©cie mais abundante √© <em>{indices['dominant_species'][0]}</em> 
            com {indices['dominant_species'][1]} indiv√≠duos registados.</li>
            
            <li><strong>Conserva√ß√£o:</strong> A diversidade observada justifica medidas de conserva√ß√£o espec√≠ficas 
            para manter a integridade do ecossistema marinho angolano.</li>
        </ol>
        
        <h4>Implica√ß√µes para a Gest√£o</h4>
        <p>Os resultados suportam a necessidade de:</p>
        <ul>
            <li>Implementa√ß√£o de √°reas marinhas protegidas</li>
            <li>Monitoriza√ß√£o cont√≠nua da biodiversidade</li>
            <li>Gest√£o pesqueira baseada em ecossistemas</li>
            <li>Investiga√ß√£o adicional sobre esp√©cies end√©micas</li>
        </ul>
        
        <h4>Limita√ß√µes do Estudo</h4>
        <p>Este relat√≥rio baseia-se em dados dispon√≠veis publicamente e pode n√£o refletir completamente 
        a diversidade real da regi√£o. Recomenda-se investiga√ß√£o adicional com amostragem dirigida.</p>
        """
        
        return ReportSection(
            title="Conclus√µes",
            content=content,
            figures=[],
            tables=[],
            metadata={}
        )
    
    async def _generate_abstract(self, indices: Dict[str, Any]) -> str:
        """Gerar resumo/abstract"""
        
        return f"""A biodiversidade marinha da Zona Econ√≥mica Exclusiva de Angola foi avaliada atrav√©s de an√°lises 
        quantitativas de dados de ocorr√™ncia de esp√©cies. Foram registadas {indices['species_richness']} esp√©cies 
        marinhas, totalizando {indices['total_abundance']:,} indiv√≠duos. O √≠ndice de Shannon-Weaver de 
        {indices['shannon_weaver']} indica diversidade {'alta' if indices['shannon_weaver'] > 3.0 else 'moderada'}, 
        enquanto a equitabilidade de Pielou de {indices['pielou_evenness']} sugere distribui√ß√£o 
        {'equilibrada' if indices['pielou_evenness'] > 0.7 else 'moderadamente equilibrada'} das esp√©cies. 
        Os resultados destacam a import√¢ncia da ZEE Angola para a biodiversidade marinha regional e suportam 
        a implementa√ß√£o de medidas de conserva√ß√£o espec√≠ficas."""
    
    async def _generate_references(self) -> List[str]:
        """Gerar lista de refer√™ncias"""
        
        return [
            "Shannon, C. E. (1948). A mathematical theory of communication. Bell System Technical Journal, 27(3), 379-423.",
            "Simpson, E. H. (1949). Measurement of diversity. Nature, 163(4148), 688.",
            "Pielou, E. C. (1966). The measurement of diversity in different types of biological collections. Journal of Theoretical Biology, 13, 131-144.",
            "Margalef, R. (1958). Information theory in ecology. General Systems, 3, 36-71.",
            "OBIS (2024). Ocean Biodiversity Information System. Intergovernmental Oceanographic Commission of UNESCO.",
            "GBIF.org (2024). GBIF Home Page. Available from: https://www.gbif.org",
            "Copernicus Marine Service (2024). Global Ocean Physics Analysis and Forecast. E.U. Copernicus Marine Service Information."
        ]
    
    # M√©todos para relat√≥rios oceanogr√°ficos (implementa√ß√µes similares)
    async def _create_ocean_executive_summary(self, analysis: Dict[str, Any]) -> ReportSection:
        """Resumo executivo oceanogr√°fico"""
        
        content = f"""
        <p>Este relat√≥rio apresenta uma an√°lise abrangente das condi√ß√µes oceanogr√°ficas da ZEE Angola, 
        baseado em dados do Copernicus Marine Environment Monitoring Service (CMEMS).</p>
        
        <p><strong>Principais resultados:</strong></p>
        <ul>
            <li>Temperatura superficial m√©dia: <strong>{analysis['mean_sst']:.1f}¬∞C</strong> (¬±{analysis['sst_std']:.1f}¬∞C)</li>
            <li>Salinidade m√©dia: <strong>{analysis['mean_salinity']:.1f} PSU</strong> (¬±{analysis['salinity_std']:.1f})</li>
            <li>Concentra√ß√£o m√©dia de clorofila-a: <strong>{analysis['mean_chlorophyll']:.2f} mg/m¬≥</strong></li>
            <li>Eventos de upwelling detectados: <strong>{analysis['upwelling_events']}</strong></li>
            <li>Qualidade dos dados: <strong>{analysis['data_quality_score']*100:.1f}%</strong></li>
        </ul>
        
        <p>A an√°lise confirma a influ√™ncia significativa do sistema de upwelling de Benguela na oceanografia regional, 
        com impactos diretos na produtividade marinha e distribui√ß√£o de esp√©cies.</p>
        """
        
        return ReportSection(
            title="Resumo Executivo",
            content=content,
            figures=[],
            tables=[],
            metadata={}
        )
    
    async def _generate_ocean_abstract(self, analysis: Dict[str, Any]) -> str:
        """Gerar abstract oceanogr√°fico"""
        
        return f"""As condi√ß√µes oceanogr√°ficas da Zona Econ√≥mica Exclusiva de Angola foram analisadas utilizando 
        dados do Copernicus Marine Environment Monitoring Service. A temperatura superficial m√©dia foi de 
        {analysis['mean_sst']:.1f}¬∞C, com salinidade de {analysis['mean_salinity']:.1f} PSU. Foram detectados 
        {analysis['upwelling_events']} eventos de upwelling durante o per√≠odo analisado, confirmando a influ√™ncia 
        do sistema de Benguela. A concentra√ß√£o m√©dia de clorofila-a de {analysis['mean_chlorophyll']:.2f} mg/m¬≥ 
        indica produtividade prim√°ria {'alta' if analysis['mean_chlorophyll'] > 1.0 else 'moderada'}. 
        Os resultados contribuem para o entendimento da oceanografia regional e suportam estrat√©gias de gest√£o 
        baseadas em ecossistemas para a ZEE Angola."""
    
    async def _generate_ocean_references(self) -> List[str]:
        """Gerar refer√™ncias oceanogr√°ficas"""
        
        return [
            "Copernicus Marine Service (2024). Global Ocean Physics Analysis and Forecast. E.U. Copernicus Marine Service Information.",
            "Shannon, L. V., & Nelson, G. (1996). The Benguela: large scale features and processes and system variability. In The South Atlantic (pp. 163-210). Springer.",
            "Hutchings, L., et al. (2009). The Benguela Current: An ecosystem of four components. Progress in Oceanography, 83(1-4), 15-32.",
            "Veitch, J., Penven, P., & Shillington, F. (2010). Modeling equilibrium dynamics of the Benguela Current system. Journal of Physical Oceanography, 40(9), 1942-1964.",
            "Rouault, M., et al. (2007). Coastal oceanic climate change and variability from 1982 to 2009 around South Africa. African Journal of Marine Science, 29(3), 369-382."
        ]
    
    # M√©todos auxiliares (implementa√ß√µes simplificadas)
    async def _create_ocean_methodology_section(self) -> ReportSection:
        return ReportSection("Metodologia", "Metodologia oceanogr√°fica...", [], [], {})
    
    async def _create_physical_conditions_section(self, data: Dict, figures: List[str]) -> ReportSection:
        return ReportSection("Condi√ß√µes F√≠sicas", "An√°lise das condi√ß√µes f√≠sicas...", figures[:1], [], {})
    
    async def _create_biogeochemical_section(self, data: Dict, figures: List[str]) -> ReportSection:
        return ReportSection("Par√¢metros Biogeoqu√≠micos", "An√°lise biogeoqu√≠mica...", [], [], {})
    
    async def _create_currents_analysis_section(self, data: Dict, figures: List[str]) -> ReportSection:
        return ReportSection("An√°lise de Correntes", "Padr√µes de correntes...", [], [], {})
    
    async def _create_upwelling_events_section(self, analysis: Dict, figures: List[str]) -> ReportSection:
        return ReportSection("Eventos de Upwelling", "An√°lise de upwelling...", figures[2:3] if len(figures) > 2 else [], [], {})
    
    async def _create_ecological_impacts_section(self, analysis: Dict) -> ReportSection:
        return ReportSection("Impactos Ecol√≥gicos", "Impactos no ecossistema...", [], [], {})
    
    async def _create_ocean_conclusions_section(self, analysis: Dict) -> ReportSection:
        return ReportSection("Conclus√µes", "Conclus√µes oceanogr√°ficas...", [], [], {})
    
    async def _generate_json_report(self, report: ScientificReport) -> str:
        """Gerar relat√≥rio em formato JSON"""
        
        # Converter para dicion√°rio serializ√°vel
        report_dict = {
            'id': report.id,
            'title': report.title,
            'subtitle': report.subtitle,
            'authors': report.authors,
            'institution': report.institution,
            'report_type': report.report_type.value,
            'created_at': report.created_at.isoformat(),
            'data_period': [report.data_period[0].isoformat(), report.data_period[1].isoformat()],
            'abstract': report.abstract,
            'keywords': report.keywords,
            'sections': [
                {
                    'title': section.title,
                    'content': section.content,
                    'figures_count': len(section.figures),
                    'tables_count': len(section.tables),
                    'metadata': section.metadata
                }
                for section in report.sections
            ],
            'references': report.references,
            'metadata': report.metadata,
            'output_format': report.output_format.value
        }
        
        return json.dumps(report_dict, indent=2, ensure_ascii=False)


# Inst√¢ncia global do engine de relat√≥rios
scientific_report_engine = ScientificReportEngine()
